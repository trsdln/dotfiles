#!/bin/bash

# Name of directory that we link dotfiles from at ~
DOTFILES_DIR_NAME=".dotfiles"

# Figure out where this repo is located
CONFIGS_ROOT_DIR=$(cd $(dirname "$0")/.. && pwd)


# format: "link_name:path_to_original"
LINK_MAP=(
  # Zprezto
  ".zshrc:./${DOTFILES_DIR_NAME}/zsh/zpreztorc.zsh"

  # Vim Configs
  ".vimrc:./${DOTFILES_DIR_NAME}/vim/vimrc.vim"
  ".vim:./${DOTFILES_DIR_NAME}/vim"
  ".config/nvim:../${DOTFILES_DIR_NAME}/nvim"

  # Misc
  ".tmux.conf:./${DOTFILES_DIR_NAME}/tmux.conf"
  ".gitconfig:./${DOTFILES_DIR_NAME}/.gitconfig"
  ".ctags.d/javascript.ctags:../${DOTFILES_DIR_NAME}/ctags.d/javascript.ctags"
  ".ctags.d/exclusion.ctags:../${DOTFILES_DIR_NAME}/ctags.d/exclusion.ctags"
  ".terminfo:./${DOTFILES_DIR_NAME}/terminfo"
)

function _create_link {
  if [ -e "$2" ]; then
    echo "Already exists"
  else
    [[ "${CONFIGS_DEBUG}" != "true" ]] && ln -s "$1" $2
    echo "Success"
  fi
}

function _remove_link {
  [[ "${CONFIGS_DEBUG}" != "true" ]] && rm $1
  echo "Removed"
}

function _main {
  cd ~

  # doesn't seem like ctags works with links
  mkdir -p .ctags.d/ .config/

  echo "Processing links at '$(echo ~)' ..."

  if [ "${CONFIGS_DEBUG}" == "true" ]; then
    echo "WARNING: Dry run enabled!"
  fi

  local unlink_param=$1

  for link_entry in "${LINK_MAP[@]}" ; do
    local link_name="${link_entry%%:*}"
    local link_path="${link_entry##*:}"
    printf "%s > %s : " "${link_name}" "${link_path}"

    if [ "${unlink_param}" == "unlink" ]; then
      _remove_link ${link_name}
    else
      _create_link "${link_path}" ${link_name}
    fi
  done

  echo "Done!"
}

_main $@
