#!/bin/bash

# Name of directory that we link dotfiles from at ~
DOTFILES_DIR_NAME=".dotfiles"

# Figure out where this repo is located
CONFIGS_ROOT_DIR=$(cd $(dirname "$0")/.. && pwd)

# format: "link_name:path_to_original"
LINK_MAP_COMMON=(
  # Shell
  ".zshrc:./${DOTFILES_DIR_NAME}/zsh/zshrc.zsh"

  ".config/nvim:../${DOTFILES_DIR_NAME}/nvim"
  ".config/git:../${DOTFILES_DIR_NAME}/git"
  ".config/lf:../${DOTFILES_DIR_NAME}/lf"
  ".ssh/config:../${DOTFILES_DIR_NAME}/private/ssh-config"
  ".config/neomutt:../${DOTFILES_DIR_NAME}/private/neomutt"
)

LINK_MAP_LINUX=(
  ".profile:./${DOTFILES_DIR_NAME}/linux/.profile"

  ".xinitrc:./${DOTFILES_DIR_NAME}/linux/.xinitrc"
  ".config/tmux.conf:../${DOTFILES_DIR_NAME}/tmux/linux-gnu.conf"
  ".config/picom.conf:../${DOTFILES_DIR_NAME}/linux/picom.conf"
  ".config/dunst:../${DOTFILES_DIR_NAME}/linux/dunst"
  ".config/sxiv:../${DOTFILES_DIR_NAME}/linux/sxiv"
  ".config/pulse/default.pa:../../${DOTFILES_DIR_NAME}/linux/pulse/default.pa"
  ".config/alacritty/alacritty.yml:../../${DOTFILES_DIR_NAME}/linux/alacritty.yml"
  ".config/newsboat/config:../../${DOTFILES_DIR_NAME}/linux/newsboat/config"
  ".config/mpv/mpv.conf:../../${DOTFILES_DIR_NAME}/linux/mpv/mpv.conf"
  ".config/mpv/input.conf:../../${DOTFILES_DIR_NAME}/linux/mpv/input.conf"
  ".config/mpv/scripts/mpris.so:/usr/lib/mpv/mpris.so"
  ".config/mimeapps.list:../${DOTFILES_DIR_NAME}/linux/mimeapps.list"
  ".config/sxhkd:../${DOTFILES_DIR_NAME}/linux/sxhkd"
  ".config/bspwm:../${DOTFILES_DIR_NAME}/linux/bspwm"
  ".config/gtk-3.0:../${DOTFILES_DIR_NAME}/linux/gtk-3.0"
  ".gtkrc-2.0:./${DOTFILES_DIR_NAME}/linux/.gtkrc-2.0"

  ".config/fontconfig:../${DOTFILES_DIR_NAME}/linux/fontconfig"
  ".config/.Xresources:../${DOTFILES_DIR_NAME}/linux/.Xresources"
  ".gnupg/gpg-agent.conf:../${DOTFILES_DIR_NAME}/gnupg/gpg-agent.linux.conf"
  ".local/share/applications/lf.desktop:../../../${DOTFILES_DIR_NAME}/linux/applications/lf.desktop"
  ".local/share/applications/sxiv.desktop:../../../${DOTFILES_DIR_NAME}/linux/applications/sxiv.desktop"

  ".config/newsboat/urls:../../${DOTFILES_DIR_NAME}/private/newsboat/urls"
  ".config/spotifyd:../${DOTFILES_DIR_NAME}/private/spotifyd"
  ".config/spotify-tui:../${DOTFILES_DIR_NAME}/private/spotify-tui"
)

LINK_MAP_DARWIN=(
  ".terminfo:./${DOTFILES_DIR_NAME}/terminfo"
  ".config/tmux.conf:../${DOTFILES_DIR_NAME}/tmux/darwin.conf"
  ".gnupg/gpg-agent.conf:../${DOTFILES_DIR_NAME}/gnupg/gpg-agent.darwin.conf"
)

function _create_link {
  if [ -e "$2" ]; then
    echo "Already exists"
  else
    [[ "${CONFIGS_DEBUG}" != "true" ]] && ln -s "$1" $2
    echo "Success"
  fi
}

function _remove_link {
  [[ "${CONFIGS_DEBUG}" != "true" ]] && rm $1
  echo "Removed"
}

function _handle_link_entry {
  local link_entry=$1
  local unlink_param=$2

  local link_name="${link_entry%%:*}"
  local link_path="${link_entry##*:}"
  printf "%s > %s : " "${link_name}" "${link_path}"

  if [ "${unlink_param}" == "unlink" ]; then
    _remove_link ${link_name}
  else
    _create_link "${link_path}" ${link_name}
  fi
}

function _main {
  cd ~

  mkdir -p .config/

  echo "Processing links at '$(echo ~)' ..."

  if [ "${CONFIGS_DEBUG}" = "true" ]; then
    echo "WARNING: Dry run enabled!"
  fi

  local unlink_param=$1

  echo "Common links:"
  for link_entry in "${LINK_MAP_COMMON[@]}" ; do
    _handle_link_entry $link_entry $unlink_param
  done

  if [ "$OSTYPE" = "linux-gnu" ]; then
    mkdir -p .config/alsa/  .config/systemd/user/ \
      .config/alacritty/ .config/newsboat .config/mpv/scripts

    echo "Linux specific links:"
    for link_entry in "${LINK_MAP_LINUX[@]}" ; do
      _handle_link_entry $link_entry $unlink_param
    done
  fi

  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "MacOS specific links:"
    mkdir -p .config/ctags
    for link_entry in "${LINK_MAP_DARWIN[@]}" ; do
      _handle_link_entry $link_entry $unlink_param
    done
  fi

  echo "Done!"
}

_main $@
