#!/bin/bash

# Name of directory that we link dotfiles from at ~
DOTFILES_DIR_NAME=".dotfiles"

# Figure out where this repo is located
CONFIGS_ROOT_DIR=$(cd $(dirname "$0")/.. && pwd)

# format: "link_name:path_to_original"
LINK_MAP_COMMON=(
  # Shell
  ".zshrc:./${DOTFILES_DIR_NAME}/zsh/zshrc.zsh"

  # Vim Configs
  ".config/nvim:../${DOTFILES_DIR_NAME}/nvim"
  ".vimrc:./${DOTFILES_DIR_NAME}/vim/vimrc.vim"
  ".vim:./${DOTFILES_DIR_NAME}/vim"

  # Misc apps
  ".gitconfig:./${DOTFILES_DIR_NAME}/.gitconfig"
  ".ctags.d/javascript.ctags:../${DOTFILES_DIR_NAME}/ctags.d/javascript.ctags"
  ".ctags.d/exclusion.ctags:../${DOTFILES_DIR_NAME}/ctags.d/exclusion.ctags"
  ".config/lf:../${DOTFILES_DIR_NAME}/lf"
)

SYSTEMD_UNITS=".config/systemd/user"
SYSTEMD_DOTFILES_PATH="../../../${DOTFILES_DIR_NAME}/linux/systemd"

LINK_MAP_LINUX=(
  ".profile:./${DOTFILES_DIR_NAME}/linux/.profile"

  # X env
  ".xinitrc:./${DOTFILES_DIR_NAME}/linux/.xinitrc"
  ".xbindkeysrc:./${DOTFILES_DIR_NAME}/linux/.xbindkeysrc"
  ".Xresources:./${DOTFILES_DIR_NAME}/linux/.Xresources"

  # misc apps
  ".tmux.conf:./${DOTFILES_DIR_NAME}/tmux/linux-gnu.conf"
  ".config/dunst:../${DOTFILES_DIR_NAME}/linux/dunst"
  ".config/sxiv:../${DOTFILES_DIR_NAME}/linux/sxiv"
  ".config/pulse/default.pa:../../${DOTFILES_DIR_NAME}/linux/pulse/default.pa"
  ".config/alacritty/alacritty.yml:../../${DOTFILES_DIR_NAME}/linux/alacritty.yml"
  ".config/newsboat/config:../../${DOTFILES_DIR_NAME}/linux/newsboat/config"
  ".config/tuijam/config.yaml:../../${DOTFILES_DIR_NAME}/linux/tuijam/config.yaml"
  ".config/mpv/mpv.conf:../../${DOTFILES_DIR_NAME}/linux/mpv/mpv.conf"
  ".config/mpv/input.conf:../../${DOTFILES_DIR_NAME}/linux/mpv/input.conf"

  # custom services
  "${SYSTEMD_UNITS}/eye-rest.service:${SYSTEMD_DOTFILES_PATH}/eye-rest.service"
  "${SYSTEMD_UNITS}/eye-rest.timer:${SYSTEMD_DOTFILES_PATH}/eye-rest.timer"
)

LINK_MAP_DARWIN=(
  ".terminfo:./${DOTFILES_DIR_NAME}/terminfo"
  ".tmux.conf:./${DOTFILES_DIR_NAME}/tmux/darwin.conf"
)

function _create_link {
  if [ -e "$2" ]; then
    echo "Already exists"
  else
    [[ "${CONFIGS_DEBUG}" != "true" ]] && ln -s "$1" $2
    echo "Success"
  fi
}

function _remove_link {
  [[ "${CONFIGS_DEBUG}" != "true" ]] && rm $1
  echo "Removed"
}

function _handle_link_entry {
  local link_entry=$1
  local unlink_param=$2

  local link_name="${link_entry%%:*}"
  local link_path="${link_entry##*:}"
  printf "%s > %s : " "${link_name}" "${link_path}"

  if [ "${unlink_param}" == "unlink" ]; then
    _remove_link ${link_name}
  else
    _create_link "${link_path}" ${link_name}
  fi
}

function _main {
  cd ~

  # doesn't seem like ctags works with links
  mkdir -p .ctags.d/ .config/

  echo "Processing links at '$(echo ~)' ..."

  if [ "${CONFIGS_DEBUG}" = "true" ]; then
    echo "WARNING: Dry run enabled!"
  fi

  local unlink_param=$1

  echo "Common links:"
  for link_entry in "${LINK_MAP_COMMON[@]}" ; do
    _handle_link_entry $link_entry $unlink_param
  done

  if [ "$OSTYPE" = "linux-gnu" ]; then
    mkdir -p .config/alsa/  .config/systemd/user/ \
      .config/alacritty/ .config/newsboat .config/mpv/

    echo "Linux specific links:"
    for link_entry in "${LINK_MAP_LINUX[@]}" ; do
      _handle_link_entry $link_entry $unlink_param
    done
  fi

  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "MacOS specific links:"
    for link_entry in "${LINK_MAP_DARWIN[@]}" ; do
      _handle_link_entry $link_entry $unlink_param
    done
  fi

  echo "Done!"
}

_main $@
